{"version":3,"file":"static/js/review-view.17584890.chunk.js","mappings":"uKACA,MAA0B,yB,SCEpBA,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,gBAAKC,UAAWC,EAAhB,SAAiCF,GADnB,EAIhBD,EAAQI,aAAe,CACrBH,SAAU,IAOZ,O,gKCdA,EAAuB,sBAAvB,EAAoD,sBAApD,EAA+I,wBAA/I,EAAiL,yB,SC2EjL,EAlEgB,WACd,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,SAGRE,EAAAA,EAAAA,YAAU,WACRC,GAED,GAAE,IAGH,IAAMA,EAAS,mCAAG,6FAChBN,GAAW,GADK,kBAIYO,EAAAA,GAAAA,aAAiBJ,GAJ7B,gBAINK,EAJM,EAINA,QACRV,EAAWU,GALG,gDAOdC,QAAQR,MAAM,8CAAd,MACAC,EAAS,KAAMQ,SARD,yBAUdV,GAAW,GAVG,4EAAH,qDAcf,OACE,2BACGD,IAAa,SAACY,EAAA,EAAD,IAEbd,EAAQe,OAAS,GAChB,eAAInB,UAAWC,EAAf,SACGG,EAAQgB,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,eAAavB,UAAWC,EAAxB,UACE,4BACE,cAAGD,UAAWC,EAAd,SAA8BqB,KAC9B,cAAGtB,UAAWC,EAAd,SAA+BsB,QAH1BF,EAOZ,OAGH,oEAGDb,IACC,SAACV,EAAA,EAAD,WACE,gGAOT,C,2ECnED0B,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAS,mCAGFC,EAAW,mCAAG,iHAEAF,IAAAA,IAAA,qCAAwCC,IAFxC,uBAEfE,EAFe,EAEfA,KACFC,EAASD,EAAKZ,QAHG,kBAKhBa,GALgB,gCAOvBZ,QAAQR,MAAM,sCAAd,MAPuB,yDAAH,qDAYXqB,EAAmB,mCAAG,WAAOC,EAAaC,GAApB,oGAERP,IAAAA,IAAA,+BACGC,EADH,kBACmBK,EADnB,iBACuCC,EADvC,oBAFQ,uBAEvBJ,EAFuB,EAEvBA,KAIFZ,EAAUY,EAAKZ,QANU,kBAQxBA,GARwB,gCAU/BC,QAAQR,MAAM,4CAAd,MAV+B,yDAAH,wDAe1BwB,EAAc,mCAAG,WAAMX,GAAN,kGAEIG,IAAAA,IAAA,iBACXH,EADW,oBACGI,EADH,oBAFJ,uBAEXE,EAFW,EAEXA,KAFW,kBAMZA,GANY,gCAQnBX,QAAQR,MAAM,wCAAd,MARmB,yDAAH,sDAaPyB,EAAS,mCAAG,WAAMZ,GAAN,kGAEEG,IAAAA,IAAA,iBACXH,EADW,4BACWI,EADX,oBAFF,uBAEbE,EAFa,EAEbA,KAFa,kBAMdA,GANc,gCAQrBX,QAAQR,MAAM,oCAAd,MARqB,yDAAH,sDAaT0B,EAAY,mCAAG,WAAMb,GAAN,kGAEDG,IAAAA,IAAA,iBACXH,EADW,4BACWI,EADX,2BAFC,uBAEhBE,EAFgB,EAEhBA,KAFgB,kBAMjBA,GANiB,gCAQxBX,QAAQR,MAAM,uCAAd,MARwB,yDAAH,sDAazB,MACEkB,YAAAA,EACAG,oBAAAA,EACAG,eAAAA,EACAC,UAAAA,EACAC,aAAAA,E","sources":["webpack://react-homework-template/./src/components/Message/Message.module.scss?ab33","components/Message/Message.jsx","webpack://react-homework-template/./src/components/Reviews/Reviews.module.scss?0ade","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__UdveK\"};","import PropTypes from 'prop-types';\nimport styles from './Message.module.scss';\n\nconst Message = ({ children }) => (\n  <div className={styles.message}>{children}</div>\n);\n\nMessage.defaultProps = {\n  children: [],\n};\n\nMessage.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Message;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Reviews_list__Dwzjr\",\"item\":\"Reviews_item__nNx+o\",\"title\":\"Reviews_title__efZrh\",\"text\":\"Reviews_text__OaCJi\",\"Author\":\"Reviews_Author__J3TOP\",\"Content\":\"Reviews_Content__44bJT\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Loader from 'components/Loader';\nimport Message from 'components/Message';\n\nimport api from 'services/api';\nimport styles from './Reviews.module.scss';\n\n// Компонент списка обзоров\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const { movieId } = useParams(); // Получаем id фильма из useParams\n\n  // Срабатывает при маунте\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  // Запрос за обзорами\n  const fetchData = async () => {\n    setLoading(true);\n\n    try {\n      const { results } = await api.fetchReviews(movieId);\n      setReviews(results);\n    } catch (error) {\n      console.error('Smth wrong with fetch reviews on movie page', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n\n      {reviews.length > 0 ? (\n        <ul className={styles.list}>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id} className={styles.item}>\n                <div>\n                  <b className={styles.Author}>{author}</b>\n                  <p className={styles.Content}>{content}</p>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie</p>\n      )}\n\n      {error && (\n        <Message>\n          <h2>\n            The service is temporarily unavailable. Please try again later.\n          </h2>\n        </Message>\n      )}\n    </div>\n  );\n};\n\nReviews.propTypes = {\n  movieId: PropTypes.object,\n  author: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default Reviews;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst apiKey = '57c4f7b58ce81ca7bd804351e71dcbc7';\n\n// Фетч трендов\nexport const fetchTrends = async () => {\n  try {\n    const { data } = await axios.get(`trending/movie/day?api_key=${apiKey}`);\n    const trends = data.results;\n\n    return trends;\n  } catch (error) {\n    console.error('Smth wrong with fetch trends in api', error);\n  }\n};\n\n// Фетч по поиску\nexport const fetchMoviesBySearch = async (searchQuery, currentPage) => {\n  try {\n    const { data } = await axios.get(\n      `search/movie?api_key=${apiKey}&query=${searchQuery}&page=${currentPage}&language=en-US`\n    );\n\n    const results = data.results;\n\n    return results;\n  } catch (error) {\n    console.error('Smth wrong with fetch movie search in api', error);\n  }\n};\n\n// Фетч фильма по id\nconst fetchMovieById = async id => {\n  try {\n    const { data } = await axios.get(\n      `/movie/${id}?api_key=${apiKey}&language=en-US`\n    );\n\n    return data;\n  } catch (error) {\n    console.error('Smth wrong with fetch movie id in api', error);\n  }\n};\n\n// Фетч актёров для фильма\nexport const fetchCast = async id => {\n  try {\n    const { data } = await axios.get(\n      `/movie/${id}/credits?api_key=${apiKey}&language=en-US`\n    );\n\n    return data;\n  } catch (error) {\n    console.error('Smth wrong with fetch cast in api', error);\n  }\n};\n\n// Фетч отзывов на фильм\nexport const fetchReviews = async id => {\n  try {\n    const { data } = await axios.get(\n      `/movie/${id}/reviews?api_key=${apiKey}&language=en-US&page=1`\n    );\n\n    return data;\n  } catch (error) {\n    console.error('Smth wrong with fetch reviews in api', error);\n  }\n};\n\n// eslint-disable-next-line\nexport default {\n  fetchTrends,\n  fetchMoviesBySearch,\n  fetchMovieById,\n  fetchCast,\n  fetchReviews,\n};\n"],"names":["Message","children","className","styles","defaultProps","useState","reviews","setReviews","isLoading","setLoading","error","setError","movieId","useParams","useEffect","fetchData","api","results","console","message","Loader","length","map","id","author","content","axios","apiKey","fetchTrends","data","trends","fetchMoviesBySearch","searchQuery","currentPage","fetchMovieById","fetchCast","fetchReviews"],"sourceRoot":""}