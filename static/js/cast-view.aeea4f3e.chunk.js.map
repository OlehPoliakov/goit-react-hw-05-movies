{"version":3,"file":"static/js/cast-view.aeea4f3e.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Actor/Actor.module.scss?15cc","components/Actor/Actor.jsx","webpack://react-homework-template/./src/components/Cast/Cast.module.scss?0e19","components/Cast/Cast.jsx","webpack://react-homework-template/./src/components/Message/Message.module.scss?ab33","components/Message/Message.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Photo\":\"Actor_Photo__tMwtW\",\"Name\":\"Actor_Name__lQDLk\",\"Character\":\"Actor_Character__9-BGz\"};","import PropTypes from 'prop-types';\nimport actorBg from 'utilities/images/actor.png';\n\nimport styles from './Actor.module.scss';\n\nconst Actor = ({ photo, name, character }) => {\n  const photoUrl = photo ? `https://image.tmdb.org/t/p/w300${photo}` : actorBg;\n\n  return (\n    <div className={styles.List}>\n      <div className={styles.PhotoWrapper}>\n        <img src={photoUrl} className={styles.Photo} alt={name} />\n      </div>\n      <p className={styles.Name}>{name}</p>\n      <p className={styles.Character}>\n        <span>Character: </span>\n        <b>{character}</b>\n      </p>\n    </div>\n  );\n};\n\nActor.dedaultProps = {\n  photo: actorBg,\n};\n\nActor.propTypes = {\n  photo: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n};\n\nexport default Actor;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__gNQg+\",\"item\":\"Cast_item__Km-n9\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Actor from 'components/Actor';\nimport Loader from 'components/Loader';\nimport Message from 'components/Message';\n\nimport api from 'services/api';\nimport styles from './Cast.module.scss';\n\n// Компонент списка актёров\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const { movieId } = useParams(); // Получаем id фильма из useParams\n\n  // Срабатывает при маунте\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  // Запрос за актёрами\n  const fetchData = async () => {\n    setLoading(true);\n\n    try {\n      const { cast } = await api.fetchCast(movieId);\n      setActors(cast);\n    } catch (error) {\n      console.error('Smth wrong with fetch cast on movie page', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      {actors.length > 0 ? (\n        <ul className={styles.list}>\n          {actors.map(({ id, profile_path, name, character }) => {\n            return (\n              <li key={id} className={styles.item}>\n                <Actor photo={profile_path} name={name} character={character} />\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>There is no information about actors for this movie.</p>\n      )}\n\n      {isLoading && <Loader />}\n\n      {error && (\n        <Message>\n          <h2>\n            The service is temporarily unavailable. Please try again later.\n          </h2>\n        </Message>\n      )}\n    </>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.object,\n};\n\nexport default Cast;\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__UdveK\"};","import PropTypes from 'prop-types';\nimport styles from './Message.module.scss';\n\nconst Message = ({ children }) => (\n  <div className={styles.message}>{children}</div>\n);\n\nMessage.defaultProps = {\n  children: [],\n};\n\nMessage.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Message;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst apiKey = '57c4f7b58ce81ca7bd804351e71dcbc7';\n\n// Фетч трендов\nexport const fetchTrends = async () => {\n  try {\n    const { data } = await axios.get(`trending/movie/day?api_key=${apiKey}`);\n    const trends = data.results;\n\n    return trends;\n  } catch (error) {\n    console.error('Smth wrong with fetch trends in api', error);\n  }\n};\n\n// Фетч по поиску\nexport const fetchMoviesBySearch = async (searchQuery, currentPage) => {\n  try {\n    const { data } = await axios.get(\n      `search/movie?api_key=${apiKey}&query=${searchQuery}&page=${currentPage}&language=en-US`\n    );\n\n    const results = data.results;\n\n    return results;\n  } catch (error) {\n    console.error('Smth wrong with fetch movie search in api', error);\n  }\n};\n\n// Фетч фильма по id\nconst fetchMovieById = async id => {\n  try {\n    const { data } = await axios.get(\n      `/movie/${id}?api_key=${apiKey}&language=en-US`\n    );\n\n    return data;\n  } catch (error) {\n    console.error('Smth wrong with fetch movie id in api', error);\n  }\n};\n\n// Фетч актёров для фильма\nexport const fetchCast = async id => {\n  try {\n    const { data } = await axios.get(\n      `/movie/${id}/credits?api_key=${apiKey}&language=en-US`\n    );\n\n    return data;\n  } catch (error) {\n    console.error('Smth wrong with fetch cast in api', error);\n  }\n};\n\n// Фетч отзывов на фильм\nexport const fetchReviews = async id => {\n  try {\n    const { data } = await axios.get(\n      `/movie/${id}/reviews?api_key=${apiKey}&language=en-US&page=1`\n    );\n\n    return data;\n  } catch (error) {\n    console.error('Smth wrong with fetch reviews in api', error);\n  }\n};\n\n// eslint-disable-next-line\nexport default {\n  fetchTrends,\n  fetchMoviesBySearch,\n  fetchMovieById,\n  fetchCast,\n  fetchReviews,\n};\n"],"names":["Actor","photo","name","character","photoUrl","actorBg","className","styles","src","alt","dedaultProps","useState","actors","setActors","isLoading","setLoading","error","setError","movieId","useParams","useEffect","fetchData","api","cast","console","message","length","map","id","profile_path","Loader","Message","children","defaultProps","axios","apiKey","fetchTrends","data","trends","results","fetchMoviesBySearch","searchQuery","currentPage","fetchMovieById","fetchCast","fetchReviews"],"sourceRoot":""}